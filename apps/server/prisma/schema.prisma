generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                  String          @id @default(uuid())
  google_id           String          @unique
  fullname            String?
  age                 Int?
  birth               DateTime?       @db.Timestamptz(6)
  gender              String?
  religion            String?
  blood_group         String?
  graduation          String?
  school              String?
  course              String?
  telephone           String?
  email               String          @unique
  medical_coverage    String?
  chronic_disease     String?
  self_medicine       String?
  drug_allergic       String?
  food_allergic       String?
  address             String?
  home_phone_tel      String?
  comcamp_attendance  Boolean?
  shirt_size          String?
  has_laptop          Boolean?
  travel              String?
  parent_fullname     String?
  parent_relation     String?
  parent_phone        String?
  academic_done       Boolean         @default(false)
  files_done          Boolean         @default(false)
  info_done           Boolean         @default(false)
  regis_done          Boolean         @default(false)
  title               String?
  prefer_food         String?
  everyday_attendance Boolean?
  has_submit_answer   Boolean         @default(false)
  answer_academic     AnswerAcademic?
  answer_regis        AnswerRegis?
  file                File?
  confirmation        Confirmation?
  answerConfirmation  AnswerConfirm?
}

model File {
  id                            String  @id @default(uuid())
  userId                        String  @unique
  face_photo_filepath           String?
  thai_nationalid_copy_filepath String?
  parent_permission_filepath    String?
  p1_filepath                   String?
  p7_filepath                   String?
  user                          User    @relation(fields: [userId], references: [id])

  @@index([userId])
}

model AnswerRegis {
  id        String  @id @default(uuid())
  userId    String  @unique
  answer1   String?
  answer2   String?
  answer3   String?
  answer4   String?
  answer5   String?
  answer6_1 String?
  answer6_2 String?
  user      User    @relation(fields: [userId], references: [id])

  @@index([userId])
}

model AnswerAcademic {
  id             String  @id @default(uuid())
  userId         String  @unique
  algo_answer    String?
  chess_notation String?
  chess_score    Int?
  user           User    @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Session {
  sid     String   @id @default(uuid())
  user_id String
  expire  DateTime @db.Timestamptz(6)
}

model Confirmation {
  user_id String @id @unique
  index String
  fullname String
  nickname String?
  request_food String?
  haveIpad Boolean?
  haveMouse Boolean?
  os_notebook String?
  travel String?
  receipt_path String?
  receipt_datetime DateTime? @db.Timestamptz(6)
  confirmation_status String
  isInfoDone DateTime? @db.Timestamptz(6)
  isAnswerDone DateTime? @db.Timestamptz(6)
  isConfirmDone DateTime? @db.Timestamptz(6)
  user User @relation(fields: [user_id], references: [id])
}

model AnswerConfirm {
  user_id String @id @unique
  question1 Int?
  question2 Int?
  question3 Int?
  question4 Int?
  question5 Int?
  question6 Int?
  question7 Int?
  question8 Int?
  question9 Int?
  question10 Int?
  question11 Int?
  question12 Int?
  question13 Int?
  question14 Int?
  question15 Int?
  question16 Int?
  question17 Int?
  question18 Int?
  question19 Int?
  question20 Int?
  question21 Int?
  question22 Int?
  question23 Int?
  question24 Int?
  question25 Int?
  question26 Int?
  question27 Int?
  question28 Int?
  question29 Int?
  question30 Int?
  user User @relation(fields: [user_id], references: [id])
}